var nextAtomUid = 0;
var stateByAtomId = Object.create(null);
var validatorByAtomId = Object.create(null);
var changeHandlersByAtomId = {};
/** @ignore */
function _useNextAtomId() {
    return nextAtomUid++;
}
/** @ignore */
function _getState(atom) {
    return stateByAtomId[atom["$$id"]];
}
/** @ignore */
function _setState(atom, state) {
    stateByAtomId[atom["$$id"]] = state;
}
/** @ignore */
function _getValidator(atom) {
    return validatorByAtomId[atom["$$id"]];
}
/** @ignore */
function _setValidator(atom, validator) {
    validatorByAtomId[atom["$$id"]] = validator;
}
/** @ignore */
function _initChangeHandlerDict(atom) {
    changeHandlersByAtomId[atom["$$id"]] = {};
}
/** @ignore */
function _addChangeHandler(atom, key, handler) {
    if (typeof changeHandlersByAtomId[atom["$$id"]][key] === "function") {
        throw new Error("Change handler already registered for key \"" + key + "\" on " + atom + ".\nRemove the existing handler before registering a new one.");
    }
    changeHandlersByAtomId[atom["$$id"]][key] = handler;
}
/** @ignore */
function _removeChangeHandler(atom, key) {
    delete changeHandlersByAtomId[atom["$$id"]][key];
}
/** @ignore */
function _runChangeHandlers(atom, previous, current) {
    Object.keys(changeHandlersByAtomId[atom["$$id"]]).forEach(function (k) {
        if (typeof changeHandlersByAtomId[atom["$$id"]][k] === "function") {
            changeHandlersByAtomId[atom["$$id"]][k]({ previous: previous, current: current });
        }
    });
}

/**
 * Registers a function to be run each time the state of `atom` changes.
 *
 * Will throw an Error if `key` is already taken by another handler.
 *
 * @example
```js

import {Atom, addChangeHandler, swap} from '@libre/atom'

const countAtom = Atom.of({ count: 0 })

addChangeHandler(countAtom, "log", ({current, previous}) => {
  console.log(previous, current)
})

swap(countAtom, (state) => ({ count: state.count + 1 }))


// stdout logs:
// { count: 0 }
// { count: 1 }

```
 */
function addChangeHandler(atom, key, handler) {
    _addChangeHandler(atom, key, handler);
}
/**
 * Deletes the `key` and the handler associated with `key` so that it not longer runs
 * when the state of `atom` changes.
 *
 * @example
```js

import {Atom, addChangeHandler, removeChangeHandler, swap} from '@libre/atom'

const countAtom = Atom.of({ count: 0 })

addChangeHandler(countAtom, "log", ({current, previous}) => {
  console.log(previous, current)
})

swap(countAtom, (state) => ({ count: state.count + 1 }))

// stdout logs:
// { count: 0 }
// { count: 1 }

removeChangeHandler(atom, "log")

swap(countAtom, (state) => ({ count: state.count + 1 }))

// nothing is logged
```
 */
function removeChangeHandler(atom, key) {
    _removeChangeHandler(atom, key);
}

/** @ignore */
function prettyPrint(val) {
    return JSON.stringify(val, null, "  ");
}

/**
 * A data structure useful for providing a controlled, predictable mechanism for mutability.
 * Allows multiple components of a program to share read/write access to some state in such
 * a way that no component can mutate another component's current reference to the state in
 * the middle of some process or asynchronous operation.
 *
 */
var Atom = /** @class */ (function () {
    /** @ignore */
    function Atom(state, _a) {
        var validator = (_a === void 0 ? {} : _a).validator;
        validator = validator || (function () { return true; });
        if (!validator(state)) {
            var errMsg = "Atom initialized with invalid state:\n\n" + prettyPrint(state) + "\n\naccording to validator function:\n" + validator + "\n\n";
            var err = Error(errMsg);
            err.name = "AtomInvalidStateError";
            throw err;
        }
        Object.defineProperty(this, "$$id", { value: _useNextAtomId() });
        _setState(this, state);
        _setValidator(this, validator);
        _initChangeHandlerDict(this);
        return this;
    }
    /**
     * Constructs a new instance of [[Atom]] with its internal state
     * set to `state`.
     *
     * @param S the type of the value being set as an [[Atom]]'s internal state
     * @example
  ```js
  
  import { Atom } from '@libre/atom'
  
  const a1 = Atom.of(0)
  const a2 = Atom.of("zero")
  const a3 = Atom.of({ count: 0 })
  ```
     */
    Atom.of = function (state, options) {
        return new Atom(state, options);
    };
    /** @ignore */
    Atom.prototype.toString = function () {
        return "Atom<" + prettyPrint(_getState(this)) + ">";
    };
    /** @ignore */
    Atom.prototype.inspect = function () {
        return this.toString();
    };
    return Atom;
}());

/** @ignore */
var expectedAtomButGot = "Expected an Atom instances, but got:";

/** @ignore */
function throwIfNotAtom(atom) {
    if (!(atom instanceof Atom)) {
        throw TypeError(expectedAtomButGot + "\n\n" + prettyPrint(atom));
    }
}

/**
 * Dereferences (i.e. "*reads*") the current state of an [[Atom]]. The dereferenced value
 * should ___not___ be mutated.
 *
 * @param <S> the type of `atom`'s inner state
 *
 * @example
```js

import {Atom, deref} from '@libre/atom'

const stateAtom = Atom.of({ count: 0 })

deref(stateAtom) // => { count: 0 }
```
 */
function deref(atom) {
    throwIfNotAtom(atom);
    return _getState(atom);
}

/**
 * Gets `atom`'s validator function
 *
 * @param <S> the type of `atom`'s inner state
 *
 * @example
```js

import {Atom, deref, getValidator, swap} from '@libre/atom'

const atom = Atom.of({ count: 0 }, { validator: (state) => isEven(state.count) })
const validator = getValidator(atom)
validator({ count: 3 }) // => false
validator({ count: 2 }) // => true
```
 */
function getValidator(atom) {
    throwIfNotAtom(atom);
    return _getValidator(atom);
}

/**
 * Sets `atom`s state to `nextState`.
 *
 * It is equivalent to `swap(atom, () => newState)`.
 *
 * @param <S> the type of `atom`'s inner state
 * @param atom an instance of [[Atom]]
 * @param nextState the value to which to set the state; it should be the same type/interface as current state
 *
  * @example
```js

import {Atom, deref, set} from '@libre/atom'

const atom = Atom.of({ count: 0 })

set(atom, { count: 100 })
deref(atom) // => { count: 100 }
```
 */
function set(atom, nextState) {
    throwIfNotAtom(atom);
    var validator = _getValidator(atom);
    var didValidate = validator(nextState);
    if (!didValidate) {
        var errMsg = "Attempted to set the state of\n\n" + atom + "\n\nwith:\n\n" + prettyPrint(nextState) + "\n\nbut it did not pass validator:\n" + validator + "\n\n";
        var err = Error(errMsg);
        err.name = "AtomInvalidStateError";
        throw err;
    }
    else {
        var prevState = deref(atom);
        _setState(atom, nextState);
        _runChangeHandlers(atom, prevState, nextState);
    }
}

/**
 * Sets the `validator` for `atom`. `validator` must be a pure function of one argument,
 * which will be passed the intended new state on any state change. If the new state is
 * unacceptable, `validator` should return false or throw an exception. If the current state
 * is not acceptable to the new validator, an exception will be thrown and the validator will
 * not be changed.
 *
 * @param <S> the type of `atom`'s inner state
 *
 * @example
```js

import {Atom, deref, setValidator, set} from '@libre/atom'
import { _setValidator } from './internal-state';

const atom = Atom.of({ count: 0 }, {validator: (state) => isNumber(state.count) })
setValidator(atom, (state) => isOdd(state.count)) // Error; new validator rejected
set(atom, {count: "not number"}) // Error; new state not set
setValidator(atom, (state) => isEven(state.count)) // All good
set(atom, {count: 2}) // All good

```
 */
function setValidator(atom, validator) {
    throwIfNotAtom(atom);
    if (!validator(_getState(atom))) {
        var errMsg = "Could not set validator on\n\n" + atom + "\n\nbecause current state would be invalid according to new validator:\n" + validator + "\n\n";
        var err = Error(errMsg);
        err.name = "AtomInvalidStateError";
        throw err;
    }
    else {
        _setValidator(atom, validator);
    }
}

/**
 * Swaps `atom`'s state with the value returned from applying `updateFn` to `atom`'s
 * current state. `updateFn` should be a pure function and ___not___ mutate `state`.
 *
 * @param <S> the type of `atom`'s inner state
 * @param atom an instance of [[Atom]]
 * @param updateFn a pure function that takes the current state and returns the next state; the next state should be of the same type/interface as the current state;
 *
 * @example
 * ```jsx
 *
 *import {Atom, swap} from '@libre/atom'
import {prettyPrint} from './prettyPrint'
 *
 *const stateAtom = Atom.of({ count: 0 })
 *const increment = () => swap(stateAtom, (state) => ({
 *  count: state.count + 1
 *}));
 * ```
 */
function swap(atom, updateFn) {
    throwIfNotAtom(atom);
    var prevState = _getState(atom);
    var nextState = updateFn(prevState);
    var validator = _getValidator(atom);
    var didValidate = validator(nextState);
    if (!didValidate) {
        var errMsg = "swap updateFn\n" + updateFn + "\n\nattempted to swap the state of\n\n" + atom + "\n\nwith:\n\n" + prettyPrint(nextState) + "\n\nbut it did not pass validator:\n" + validator + "\n\n";
        var err = Error(errMsg);
        err.name = "AtomInvalidStateError";
        throw err;
    }
    else {
        _setState(atom, nextState);
        _runChangeHandlers(atom, prevState, nextState);
    }
}

export { addChangeHandler, removeChangeHandler, Atom, deref, getValidator, set, setValidator, swap };
//# sourceMappingURL=index.esm.js.map
