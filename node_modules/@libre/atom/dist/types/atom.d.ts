import { AtomConstructorOptions } from "./internal-types";
/**
 * A data structure useful for providing a controlled, predictable mechanism for mutability.
 * Allows multiple components of a program to share read/write access to some state in such
 * a way that no component can mutate another component's current reference to the state in
 * the middle of some process or asynchronous operation.
 *
 */
export declare class Atom<S = any> {
    /**
     * Constructs a new instance of [[Atom]] with its internal state
     * set to `state`.
     *
     * @param S the type of the value being set as an [[Atom]]'s internal state
     * @example
  ```js
  
  import { Atom } from '@libre/atom'
  
  const a1 = Atom.of(0)
  const a2 = Atom.of("zero")
  const a3 = Atom.of({ count: 0 })
  ```
     */
    static of<S>(state: S, options?: AtomConstructorOptions<S>): Atom<S>;
    /** @ignore */
    readonly ["$$id"]: number;
    /** @ignore */
    private constructor();
    /** @ignore */
    toString(): string;
    /** @ignore */
    inspect(): string;
}
